server.port: 9090

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
    user:
      name: user
      password: 1234
  datasource:
    url: jdbc:mariadb://${DB_SOURCE_URL}    # mariadb
    #    url: jdbc.mariadb://thejoeun1.iptime.org.3310/mydb
    driver-class-name: org.mariadb.jdbc.Driver
    username: ${DB_SOURCE_ID}
    password: ${DB_SOURCE_PW}
  h2:
    console:
      path: /h2-console
      enabled: true
  jpa:
    show-sql: true # java코드로 짠 sql을
    defer-datasource-initialization: true # data.sql 사용을 위해서 필수적으로 등록
    properties:
      hibernate:
        format_sql: true  # sql문 pretty하게 보여줌
        use_sql_comments: true # model이 어느 디텍토리에 있는지 알려줌
    generate-ddl: true # true, false //default 는 false. true 라면 @Entity가 있는 테이블을 만듦
    hibernate: #hibernate 값이 존재하면 generate-ddl 의 값을 신경쓰지 않는다.
      ddl-auto: none  # create, create-drop, update, validate, none
      # 1. create : spring boot를 처음 실행 시 Entity로 된 클래스 및 테이블을 drop 하고 create 함
      # 2. create-drop : 위 과정을 거친 후 spring boot 종료시에 다시 drop 함
      # 3. update : 연결된 db schema 와 자바 entity 를 비교하여 다른 점이 있다면 다른 점만 ddl 코드를 생성
      # 4. validate : 연결된 db schema 와 자바 entity 를 비교하여 다른 점이 있다면 오류코드만 보여줌
      # 5. none : ddl 구문을 만들지 않음.
  sql:
    init:
      mode: always
      # always: embeded db가 아닌 외부 db 사용시 spring boot를 실행할때 마다 data.sql schema.sql import.sql을 항상 실행
      # never: data.sql schema.sql import.sql을 실행하지 않음
  devtools:
    livereload:
      enabled: true
# mapper.xml
mybatis:
  mapper-locations: mybatis-mapper/**/*.xml
  # camel case
  configuration:
    map-underscore-to-camel-case: true
  # package model/ xml에 있는 모델 앞의 패키지명을 생략 가능하도록 지원해주는 기능
  type-aliases-package: com.example.demo.model
#jwt:
#  secret: 1234